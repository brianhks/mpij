/*
 * Copyright (c) 2013, Brian Hawkins
 * Permission is granted to use this code without restriction as long
 * as this copyright notice appears in all source files.
 */
 
import tablesaw.*;
import tablesaw.rules.*;
import tablesaw.addons.java.*;
import tablesaw.addons.ivy.*;


version = "1.0";
 
bldoutdir = "build";

saw.setProperty(JavaProgram.PROGRAM_VERSION_PROPERTY, version);


jp = new JavaProgram().setup();


ivy = new IvyAddon()
	.addSettingsFile("ivysettings.xml")
	.setup();

pomRule = ivy.createPomRule("build/jar/pom.xml", ivy.getResolveRule("provided"))
	.addDepend(jp.getJarRule())
	.addLicense("The Apache Software License, Version 2.0", "http://www.apache.org/licenses/LICENSE-2.0.txt", "repo")
	.addDeveloper("brianhks", "Brian", "brianhks1+mpij@gmail.com");

//------------------------------------------------------------------------------
//==-- Maven Artifacts --==
mavenArtifactsRule = new SimpleRule("maven-artifacts").setDescription("Create maven artifacts for maven central")
      .addSource(jp.getJarRule().getTarget())
      .addSource(jp.getJavaDocJarRule().getTarget())
      .addSource(jp.getSourceJarRule().getTarget())
      .addSource("build/jar/pom.xml")
      .setMakeAction("signArtifacts");

void signArtifacts(Rule rule)
{
   for (String source : rule.getSources())
   {   
      cmd = "gpg -ab "+source;
      saw.exec(cmd); 
   }      
}


new JarRule("maven-bundle", "build/bundle.jar").setDescription("Create bundle for uploading to maven central")
      .addDepend(mavenArtifactsRule)
      .addFileSet(new RegExFileSet(saw.getProperty(JavaProgram.JAR_DIRECTORY_PROPERTY), ".*"));




//------------------------------------------------------------------------------
//==-- Publish Artifacts --==
if (version.contains("SNAPSHOT"))
   defaultResolver = "local-m2-publish-snapshot";
else   
   defaultResolver = "local-m2-publish";

PublishRule publishRule = ivy.createPublishRule(saw.getProperty("ivy.publish_resolver", defaultResolver),
         ivy.getResolveRule("compile"))
      .setName("publish")
      .setDescription("Publish pom and jar to maven snapshot repo")
      .publishMavenMetadata()
      .setOverwrite(true);

publishRule.addArtifact(pomRule.getTarget())
      .setType("pom")
      .setExt("pom")
      .setIsMetadata();
publishRule.addArtifact(jp.getJarRule().getTarget())
      .setType("jar")
      .setExt("jar");





/*
//-------------------------------------------------------------------
//==-- USE JavaCompiler TO COMPILE TEST FILES --==
tstjc = new JavaCompiler(tstsrc, testdir, classpath);
tstClassFiles = tstjc.getClassFiles();


//-------------------------------------------------------------------
//==-- CREATE JAVADOCS --==
make.createPhonyRule("javadoc", "doc", "javadoc");
void javadoc(String target, String[] prereqs)
	{
	make.exec(srcdir, "javadoc -public -d ../doc "+make.arrayToString(sourceFiles), true);
	}
	
//-------------------------------------------------------------------
//==-- TEST --==
make.createPhonyRule("testbld", new String[] {jarfile, tstjar}, null);
make.createPhonyRule("test", "testbld", "test");
void test(String target, String[] prereqs)
	{
	make.setProperty("cpmake.multiThreadOutput", "true");
	print("Running test");
	
	//copy jar file to other server
	*//*make.exec("scp "+jarfile+" linux:");
	make.exec("scp "+tstjar+" linux:");
	
	make.setProperty("cpmake.multiThreadOutput", "true");
	make.exec("java -cp "+jarfile+File.pathSeparator+tstjar+
			" Hotplate -MPIJrank 0 -MPIJhostname 192.168.1.20 -MPIJnumprocs 2 "+
			"-p4pg Hotplate.p4pg -ssh");*//*
			
	//Uncomment the test you want to run
	make.exec("java -cp "+jarfile+File.pathSeparator+tstjar+" mpij.internal.HotplateTest");
	//make.exec("java -cp "+jarfile+File.pathSeparator+tstjar+" mpij.internal.MatrixMultTest");
	//make.exec("java -cp "+jarfile+File.pathSeparator+tstjar+" mpij.internal.PostOfficeTest");
	//make.exec("java -cp "+jarfile+File.pathSeparator+tstjar+" mpij.internal.CommunicatorTest");
	//make.exec("java -cp "+jarfile+File.pathSeparator+tstjar+" mpij.internal.util.ByteBufferStreamTest");
	//make.exec("java -cp "+jarfile+File.pathSeparator+tstjar+" mpij.msg.ObjectMessageTest");
	//make.exec("java -cp "+jarfile+File.pathSeparator+tstjar+" mpij.msg.IntMessageTest");
	
	}	


*/

saw.setDefaultTarget("jar");

